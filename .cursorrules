## Cursor Rules for Shopify Theme with Tailwind CSS

**Fundamental Principles**
- Start every response with a robot emoji to maintain a consistent and friendly tone.
- Write clean, simple, and readable code. Prioritize clarity over complexity.
- Implement features in the simplest possible way. Avoid unnecessary abstractions.
- Keep files small and focused (ideally <200 lines) for better maintainability.
- Use American English for all code comments, variable names, and documentation.
- Use lowercase with hyphens for file naming (e.g., product-card.liquid, styles.css).
- Use 2 spaces for indentation in all code files.
- Ensure all files start with a comment stating the file name and its purpose (e.g., /* styles.css - Global styles with Tailwind */).
- Test after every meaningful change to catch issues early.
- Focus on core functionality before optimization. Build it first, then refine.
- Use clear, consistent naming conventions. Names should reflect purpose (e.g., btn-primary, product-grid).
- Consider requirements and approaches carefully before coding to ensure thoughtful implementation.
- Write simple, clean, and modular code. Break complex tasks into smaller, reusable parts.
- Use clear, concise language in code and comments. Write short, easy-to-read sentences.
- Tailwind CSS Usage: Rely on Tailwind’s utility classes for styling to ensure consistency and minimize custom CSS.
- Class Naming: When custom classes are needed, use descriptive names tied to the component’s purpose.

<<<<<<< HEAD
## Directory Structure
- assets/ - contains all the assets for the theme
- config/ - contains all the config files for the theme
- layout/ - contains all the layout files for the theme
- sections/ - contains all the sections for the theme
- snippets/ - contains all the snippets for the theme
- templates/ - contains all the templates for the theme

## Tech Stack
- Shopify
- Tailwind CSS
- Liquid
- JavaScript
- HTML
- Skio Subscriptions (https://code.skio.com/)

## Relevant Files
- instructions/roadmap.md
- instructions/skio_documentation.md

## Error Fixing
- Do not jump to conclusions. Consider multiple possible causes before deciding.
- Explain the problem in plain English.
- Make minimal necessary changes, altering as few lines of code as possible.
- For unusual errors, research or consult up-to-date documentation (e.g., Shopify’s developer resources).
=======
**Error Fixing**
- Avoid assumptions. Explore multiple potential causes before settling on a fix.
- Explain issues plainly. Describe the problem in simple English for clarity.
- Make minimal changes. Fix errors by altering as few lines as possible.
- Research unusual errors. Use Shopify’s developer docs or Tailwind’s documentation for guidance.
- Debugging Tailwind Classes: Check that Tailwind classes are applied correctly and don’t clash with Shopify’s default styles.
- PurgeCSS Setup: Confirm PurgeCSS is configured to retain necessary Tailwind classes in production.
>>>>>>> main

**Building Process**
- Test each feature thoroughly. Verify functionality before proceeding.
- Keep code simple and modular. Avoid convoluted logic or over-engineering.
- Research when unsure. Consult Shopify docs, Tailwind resources, or peers for clarity.
- Tailwind Configuration: Use a tailwind.config.js file to customize Tailwind’s theme (e.g., colors, spacing).
- CSS Compilation: Process Tailwind with PostCSS or a similar tool to include only used classes in production.

**Comments**
- Add helpful comments. Explain the intent and logic behind code blocks.
- Preserve old comments. Only remove them if they’re outdated or incorrect.
- Document extensively. Include detailed comments for maintainability.
- Explain changes. Note the reasoning behind modifications in comments.
- Use simple language in comments. Keep sentences short and clear.
- Comment Tailwind Usage: Clarify grouped Tailwind classes (e.g., <!-- Flexbox layout for product grid -->).
- Document Tailwind Customizations: Add notes in tailwind.config.js for custom settings.

## Shopify Theme Development Best Practices
<<<<<<< HEAD
- **Liquid Best Practices**
  - Use Shopify Liquid filters efficiently; avoid chaining more than 3 filters for readability.
  - Prefix custom variables with `custom_` to avoid conflicts with Shopify globals.
  - Keep logic simple and use `elsif` instead of nested `if` statements where possible.
  - Use `limit` and `offset` to optimize performance in `for` loops.
- **HTML Best Practices**
  - Use semantic HTML5 tags (e.g., `<section>`, `<article>`, `<nav>`) for accessibility.
  - Follow BEM (Block__Element--Modifier) naming convention for classes.
  - Use `data-` attributes for JavaScript interactions instead of inline scripts.
- **JavaScript Best Practices**
  - Prefer vanilla JavaScript over jQuery for lightweight Shopify themes.
  - Use event delegation for dynamic elements.
  - Organize code into ES6 modules if using a bundler (e.g., Webpack).
  - Ensure JavaScript doesn’t break Shopify’s Theme Check linting tool.
- **Shopify-Specific Rules**
  - Use `{% schema %}` in section files with proper JSON formatting.
  - Store static assets in the `/assets/` folder with descriptive names.
  - Use Shopify’s `t` filter for multilingual support.
- **Performance Optimization**
  - Apply `loading="lazy"` to images outside the initial viewport.
  - Minify CSS and JS files in production using Shopify’s build tools or external minifiers.
  - Leverage Shopify’s CDN for assets by using `{{ 'asset_name' | asset_url }}`.
- **Error Handling**
  - Wrap risky Liquid operations in `unless` or use default fallbacks.
  - Add basic error logging for JavaScript debugging.
- **Testing and Validation**
  - Run Shopify Theme Check before committing changes.
  - Validate accessibility with tools like WAVE or Lighthouse for WCAG compliance.
  - Test on Chrome, Firefox, Safari, and Edge.
- **Tailwind CSS Best Practices**
  - Use utility classes for one-off styles; define component classes with @apply for reusability.
  - Safelist classes used in dynamic Liquid templates to prevent purging.
  - Map theme settings to predefined Tailwind classes for consistent styling.
  - Extend Tailwind config for theme-specific customizations (e.g., colors, fonts).
  - Apply responsive variants (e.g., sm:, md:) for adaptive layouts.
  - Test styles with various section settings and combinations.
  - Enable dark mode support with dark: variants if needed.
  - Document Tailwind class usage in code or theme guides.
  - Create Liquid snippets for reusable components with Tailwind classes.
  - Use build tools to compile Tailwind CSS, purge unused styles, and minify the output.
=======
>>>>>>> main

**Liquid Best Practices**
- Use Liquid filters efficiently; limit chaining to 3 for readability (e.g., {{ product.title | truncate: 50 | escape }}).
- Prefix custom variables with custom_ to avoid conflicts (e.g., custom_product_id).
- Simplify logic with elsif instead of nested if statements.
- Optimize for loops with limit and offset for performance.

**HTML Best Practices**
- Use semantic HTML5 tags (e.g., <section>, <nav>) for accessibility and structure.
- Apply BEM naming for custom classes when not using Tailwind (e.g., card__title--featured).
- Use data- attributes for JavaScript hooks (e.g., <button data-action="toggle">).

**CSS Best Practices**
- Leverage Tailwind’s utility classes to reduce custom CSS. Reserve custom styles for unique cases.
- Define theme-specific styles with CSS custom properties (e.g., --primary-color: #1a73e8;).
- Adopt a mobile-first approach using Tailwind’s responsive prefixes (e.g., md:flex).
- Avoid !important and overly specific selectors.

**JavaScript Best Practices**
- Use vanilla JavaScript for lightweight themes; avoid jQuery unless required.
- Implement event delegation for dynamic elements (e.g., document.addEventListener).
- Organize code into ES6 modules if using a bundler like Webpack.
- Ensure compatibility with Shopify’s Theme Check tool.
- Sync JavaScript with Tailwind by toggling utility classes (e.g., classList.toggle('hidden')).

**Shopify-Specific Rules**
- Include {% schema %} in section files with valid JSON formatting.
- Store assets in /assets/ with clear names (e.g., logo.png, main.js).
- Support multilingual themes with Shopify’s t filter (e.g., {{ 'general.search' | t }}).

**Performance Optimization**
- Add loading="lazy" to off-screen images.
- Minify CSS and JS in production using Shopify tools or external minifiers.
- Use Shopify’s CDN with {{ 'filename' | asset_url }} for assets.
- Purge unused Tailwind classes to shrink stylesheet size.

**Error Handling**
- Guard Liquid code with unless or fallbacks (e.g., {{ product.title | default: 'Unnamed' }}).
- Log JavaScript errors for debugging (e.g., console.error('Error:', err)).

**Testing and Validation**
- Run Shopify Theme Check before committing.
- Check accessibility with WAVE or Lighthouse for WCAG compliance.
- Test across Chrome, Firefox, Safari, and Edge.

## Tailwind CSS Best Practices
- Utility-First Approach: Build components with Tailwind’s utility classes (e.g., <div class="flex justify-center">).
- Responsive Design: Use Tailwind’s prefixes for responsive layouts (e.g., sm:text-lg md:grid-cols-2).
- Component Extraction: Group reusable utility sets into components or use @apply in custom CSS (e.g., .btn { @apply px-4 py-2 bg-blue-500; }).
- Customization: Extend Tailwind in tailwind.config.js to match your theme (e.g., custom colors like primary: '#1a73e8').
- Accessibility: Ensure utilities maintain contrast and usability (e.g., text-gray-900 on light backgrounds).
- Flat Structure: Avoid deep nesting in HTML for simplicity and performance.
- Interactive Features: Use Tailwind’s states like hover:bg-blue-600 or focus:outline-none for interactivity.

## Example Implementation

**product-card.liquid**
<!-- product-card.liquid - Displays a single product card -->
<div class="product-card flex flex-col items-center p-4 bg-white shadow-md hover:shadow-lg">
  <img src="{{ product.featured_image | img_url: '300x300' }}" alt="{{ product.title | escape }}" loading="lazy" class="w-full h-48 object-cover">
  <h3 class="mt-2 text-lg font-semibold text-gray-900">{{ product.title }}</h3>
  <p class="mt-1 text-gray-600">{{ product.price | money }}</p>
  <button class="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" data-action="add-to-cart">Add to Cart</button>
</div>

**main.js**
// main.js - Handles add-to-cart button clicks
document.addEventListener('click', (e) => {
  if (e.target.matches('[data-action="add-to-cart"]')) {
    console.log('Adding to cart...');
    // Add cart logic here
  }
});




{% comment %}
  TEST CUSTOMER ID: 8582472106288
  TEST PRODUCT ID: 9761425097008
{% endcomment %}

<!-- MAIN WRAPPER -->
<div class="page-wrapper">

  <!-- LEFT SECTION / HERO -->
  <div class="hero-section">
    <!-- Hero Color Block (instead of a hero image) -->
    <div class="hero-color-block"></div>

    <!-- Hero Text / Headline -->
    <div class="hero-text">
      <h1>Energize &amp; Fuel Your Body</h1>
      <p class="hero-subtitle">Discover the indulgent taste of our Protein Coffee.</p>
      
      <!-- Icon Row -->
      <div class="hero-icons">
        <div class="icon-item">
          <div class="icon-placeholder"></div>
          <span>Zero Sugar</span>
        </div>
        <div class="icon-item">
          <div class="icon-placeholder"></div>
          <span>Brain Boosting</span>
        </div>
        <div class="icon-item">
          <div class="icon-placeholder"></div>
          <span>Prebiotics</span>
        </div>
        <div class="icon-item">
          <div class="icon-placeholder"></div>
          <span>5 Delicious Flavors</span>
        </div>
      </div>
    </div>
  </div>

  <!-- RIGHT SECTION / PRODUCT CONFIG -->
  <div class="product-section">

    <h2 class="product-title">Clear Protein</h2>
    <p class="product-subtitle-right">Energy | Focus | Weight Loss</p>
    <p class="product-description-right">
      Enjoy premium latte convenience with our indulgent, protein-infused Protein Coffee.
      Perfect for customizing your favorite iced coffee blend while you meet your protein goals!
    </p>

    <!-- BUNDLE OPTIONS -->
    <div class="bundle-options">
      <div class="bundle">
        <span class="deal-tag">BEST DEAL</span>
        <button class="bundle-btn">4 Bags</button>
      </div>
      <div class="bundle">
        <button class="bundle-btn selected">3 Bags</button>
      </div>
      <div class="bundle">
        <button class="bundle-btn">2 Bags</button>
      </div>
      <div class="bundle">
        <button class="bundle-btn">1 Bag</button>
      </div>
    </div>

    <!-- SUBSCRIPTION BOX -->
    <div class="subscription-box">
      <div class="subscription-wrapper">
        <span class="save-tag">SAVE 30% ON FIRST ORDER</span>
        <label class="subscription-option" for="subscribe">
          <input type="radio" id="subscribe" name="purchase-option" checked class="hidden-radio">
          <div class="subscription-left">
            <span class="sub-title">Subscribe &amp; Save</span>
          </div>
          <span class="price"><del>$107.85</del> <strong>$74.85</strong></span>
        </label>
      </div>
    </div>

    <!-- ONE-TIME PURCHASE -->
    <label class="one-time-option" for="one-time">
      <input type="radio" id="one-time" name="purchase-option" class="hidden-radio">
      <span>One-time Purchase</span>
      <span class="one-time-price">$107.85</span>
    </label>

    <!-- FLAVOR SELECTION -->
    <div class="variant-selection">
      <h3 class="variant-title">Select Flavors</h3>
      <div class="variant-grid">
        <!-- Variants dynamically inserted by JavaScript -->
      </div>
    </div>

    <!-- SELECTED VARIANTS LIST -->
    <div class="selected-variants">
      <h3>Selected Flavors</h3>
      <div class="selected-variants-list">
        <p class="empty-selection">No flavors selected</p>
      </div>
    </div>

    <!-- ADD TO CART BUTTON -->
    <button class="add-to-cart-btn" disabled>
      Add to Cart (0/3)
    </button>

    <!-- Optional: Debug Data (can be hidden or commented out) -->
    <div class="debug-container">
      <h4>Debug Data:</h4>
      <div>
        <h5>Selected Variants:</h5>
        <pre>
          <script>
            document.write(JSON.stringify(selectedVariants, null, 2))
          </script>
        </pre>
      </div>
      <div>
        <h5>Variant Quantities:</h5>
        <pre>
          <script>
            document.write(JSON.stringify(Object.fromEntries(variantQuantities), null, 2))
          </script>
        </pre>
      </div>
    </div>
  </div> <!-- END .product-section -->
</div> <!-- END .page-wrapper -->

<!-- JAVASCRIPT (same logic as before) -->
<script>
  // Existing JavaScript from your code, unchanged
  // (Except references to images replaced by color-block placeholders, if needed)

  let skioData = null;
  let selectedVariants = [];
  let variantQuantities = new Map();

  function updateVariantQuantity(variant, increment = true) {
    const currentQty = variantQuantities.get(variant.platformId) || 0;
    const bundleSize = parseInt(document.querySelector('.bundle-btn.selected').textContent);
    const totalSelected = Array.from(variantQuantities.values()).reduce((a, b) => a + b, 0);

    if (increment && totalSelected >= bundleSize) return;

    const newQty = increment ? currentQty + 1 : Math.max(0, currentQty - 1);

    if (newQty === 0) {
      variantQuantities.delete(variant.platformId);
      const index = selectedVariants.findIndex(v => v.platformId === variant.platformId);
      if (index > -1) selectedVariants.splice(index, 1);
    } else {
      variantQuantities.set(variant.platformId, newQty);
      const existingIndex = selectedVariants.findIndex(v => v.platformId === variant.platformId);
      if (existingIndex === -1) {
        selectedVariants.push({
          platformId: variant.platformId,
          productVariantTitle: variant.productVariantTitle,
          // Instead of an imageSrc, we might just keep it blank or store a color reference
          imageSrc: '',
          price: variant.price,
          inventory: variant.inventory
        });
      }
    }

    // Update debug container
    document.querySelectorAll('.debug-container pre').forEach(pre => {
      const title = pre.previousElementSibling.textContent.trim();
      if (title === 'Selected Variants:') {
        pre.textContent = JSON.stringify(selectedVariants, null, 2);
      } else if (title === 'Variant Quantities:') {
        pre.textContent = JSON.stringify(Object.fromEntries(variantQuantities), null, 2);
      }
    });

    updateAllQuantityDisplays();
  }

  function updateSelectedVariantsList() {
    const listContainer = document.querySelector('.selected-variants-list');
    if (!listContainer) return;

    if (selectedVariants.length === 0) {
      listContainer.innerHTML = '<p class="empty-selection">No flavors selected</p>';
      return;
    }

    const variantsList = selectedVariants.map(variant => `
      <div class="selected-variant-item">
        <div class="variant-color-block-small"></div>
        <div class="variant-details">
          <span class="variant-name">${variant.productVariantTitle}</span>
          <div class="quantity-controls">
            <button class="qty-btn minus" data-variant-id="${variant.platformId}">-</button>
            <span class="qty-display">${variantQuantities.get(variant.platformId)}</span>
            <button class="qty-btn plus" data-variant-id="${variant.platformId}">+</button>
          </div>
        </div>
      </div>
    `).join('');

    listContainer.innerHTML = variantsList;

    listContainer.querySelectorAll('.qty-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const variantId = e.target.dataset.variantId;
        const isIncrement = e.target.classList.contains('plus');
        const variant = skioData.DynamicBox.selectableProductVariants[0].productVariants
          .find(v => v.platformId === variantId);

        updateVariantQuantity(variant, isIncrement);
      });
    });
  }

  function updatePricesForVariant(variantId) {
    if (!skioData) return;
    const selectedVariant = skioData.DynamicBox.selectableProductVariants[0].productVariants
      .find(v => v.platformId === variantId);
    if (selectedVariant) {
      const bundleSize = document.querySelector('.bundle-btn.selected').textContent;
      updatePrices(bundleSize, selectedVariant.price);
    }
  }

  function updatePrices(bundleSize, variantPrice = 38) {
    const isSubscription = document.getElementById('subscribe').checked;
    const quantity = parseInt(bundleSize);
    const regularPrice = (variantPrice * quantity).toFixed(2);
    const subscriptionDiscount = 0.30; // 30% off
    const subscriptionPrice = (regularPrice * (1 - subscriptionDiscount)).toFixed(2);

    document.querySelector('.price').innerHTML = 
      `<del>$${regularPrice}</del> <strong>$${subscriptionPrice}</strong>`;
    document.querySelector('.one-time-price').textContent = `$${regularPrice}`;

    const discountPercent = Math.round(subscriptionDiscount * 100);
    document.querySelector('.discount-label').textContent = 
      `SAVE ${discountPercent}% ON FIRST ORDER`;
  }

  function updateAllQuantityDisplays() {
    document.querySelectorAll('.variant-row').forEach(row => {
      const variantId = row.dataset.variantId;
      const qty = variantQuantities.get(variantId) || 0;
      const qtyDisplay = row.querySelector('.qty-display');
      const minusBtn = row.querySelector('.qty-btn.minus');
      if (qtyDisplay) qtyDisplay.textContent = qty;
      if (minusBtn) minusBtn.disabled = qty === 0;
    });
    updateSelectedVariantsList();
    updateButtons();
  }

  function updateButtons() {
    const bundleSize = parseInt(document.querySelector('.bundle-btn.selected').textContent);
    const totalQuantity = Array.from(variantQuantities.values()).reduce((a, b) => a + b, 0);
    const addToCartBtn = document.querySelector('.add-to-cart-btn');
    if (addToCartBtn) {
      addToCartBtn.disabled = totalQuantity !== bundleSize;
      addToCartBtn.innerHTML = `Add to Cart (${totalQuantity}/${bundleSize})`;
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    // Fetch data from Skio
    fetch('https://api.skio.com/storefront-http/get-dynamic-box', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ productPlatformId: '9761425097008' }),
    })
      .then((response) => response.json())
      .then((data) => {
        skioData = data;
        const variants = data.DynamicBox.selectableProductVariants[0].productVariants;
        renderVariants(variants);
      })
      .catch((error) => console.error('Error fetching Skio data:', error));

    // Render variants
    function renderVariants(variantData) {
      const variantGrid = document.querySelector('.variant-grid');
      if (!variantGrid || !variantData) return;

      const variantHTML = variantData.map((variant) => {
        const currentQty = variantQuantities.get(variant.platformId) || 0;
        return `
          <div class="variant-row" 
               data-variant-id="${variant.platformId}"
               data-price="${variant.price}">
            <div class="variant-image">
              <img src="${variant.imageSrc}" alt="${variant.productVariantTitle}" 
                   width="60" height="60" loading="lazy">
            </div>
            <div class="variant-info">
              <span class="variant-name">${variant.productVariantTitle}</span>
              ${variant.inventory <= 0 ? '<span class="sold-out">Sold Out</span>' : ''}
            </div>
            <div class="variant-actions">
              <div class="quantity-controls">
                <button class="qty-btn minus" data-variant-id="${variant.platformId}" ${currentQty === 0 ? 'disabled' : ''}>-</button>
                <span class="qty-display">${currentQty}</span>
                <button class="qty-btn plus" data-variant-id="${variant.platformId}" ${variant.inventory <= 0 ? 'disabled' : ''}>+</button>
              </div>
            </div>
          </div>
        `;
      }).join('');

      variantGrid.innerHTML = variantHTML;
      attachVariantHandlers();
      attachQuantityHandlers();
    }

    function attachVariantHandlers() {
      // Remove click handlers for variant rows - only quantity buttons should be interactive
      document.querySelectorAll('.variant-row').forEach(row => {
        row.style.cursor = 'default';
      });
    }

    function attachQuantityHandlers() {
      document.querySelectorAll('.qty-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.stopPropagation();
          const variantId = e.target.dataset.variantId;
          const isIncrement = e.target.classList.contains('plus');
          const variant = skioData.DynamicBox.selectableProductVariants[0].productVariants
            .find(v => v.platformId === variantId);
          if (!variant) return;
          updateVariantQuantity(variant, isIncrement);
        });
      });
    }

    // Handle bundle selection
    const bundleButtons = document.querySelectorAll('.bundle-btn');
    bundleButtons.forEach((button) => {
      button.addEventListener('click', function () {
        bundleButtons.forEach((btn) => btn.classList.remove('selected'));
        this.classList.add('selected');
        const selectedVariantRow = document.querySelector('.variant-row.selected');
        if (selectedVariantRow) {
          updatePricesForVariant(selectedVariantRow.dataset.variantId);
        } else {
          updatePrices(this.textContent);
        }
      });
    });

    // Subscription toggle
    const subscribeRadio = document.getElementById('subscribe');
    const oneTimeRadio = document.getElementById('one-time');
    [subscribeRadio, oneTimeRadio].forEach((radio) => {
      radio.addEventListener('change', () => {
        const selectedBundle = document.querySelector('.bundle-btn.selected').textContent;
        const selectedVariantRow = document.querySelector('.variant-row.selected');
        if (selectedVariantRow) {
          updatePricesForVariant(selectedVariantRow.dataset.variantId);
        } else {
          updatePrices(selectedBundle);
        }
        updateButtons();
      });
    });

    // Add to Cart
    document.querySelector('.add-to-cart-btn').addEventListener('click', async function() {
      if (this.disabled) return;
      const originalText = this.textContent;
      try {
        this.textContent = 'Adding...';
        this.disabled = true;
        const items = Array.from(variantQuantities.entries()).map(([variantId, quantity]) => {
          const numericId = variantId.split('/').pop();
          return { id: numericId, quantity: quantity };
        });
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items })
        });
        if (!response.ok) throw new Error('Add to cart failed');
        await response.json();
        this.textContent = 'Added to Cart!';
        selectedVariants = [];
        variantQuantities.clear();
        updateAllQuantityDisplays();
        if (typeof window.refreshCart === 'function') {
          window.refreshCart();
        }
      } catch (error) {
        console.error('Error:', error);
        this.textContent = 'Error - Try Again';
      } finally {
        setTimeout(() => {
          this.textContent = originalText;
          this.disabled = false;
        }, 2000);
      }
    });
  });
</script>

<style>
/* Page Wrapper: Two-column layout */
.page-wrapper {
  display: flex;
  flex-wrap: wrap; /* For responsiveness on smaller screens */
  gap: 20px;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* LEFT SECTION (Hero) */
.hero-section {
  flex: 1;
  min-width: 300px;
  background: #f2f3ff; /* Light background to match the example */
  border-radius: 10px;
  padding: 20px;
  text-align: center;
}

/* Hero Color Block in place of an image */
.hero-color-block {
  width: 100%;
  height: 300px;
  background-color: #cab8ff; /* Example placeholder color */
  border-radius: 10px;
}

/* Hero Text */
.hero-text {
  margin-top: 20px;
}

.hero-text h1 {
  font-size: 28px;
  margin-bottom: 10px;
  font-weight: 800;
}

.hero-subtitle {
  font-size: 16px;
  margin-bottom: 20px;
  color: #555;
}

.hero-icons {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
}

.icon-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 80px;
  text-align: center;
}

/* Icon Placeholder in place of images */
.icon-placeholder {
  width: 50px;
  height: 50px;
  background-color: #ffa5a5;
  border-radius: 8px;
  margin-bottom: 5px;
}

/* RIGHT SECTION (Product) */
.product-section {
  flex: 1;
  min-width: 300px;
  background: #ffffff;
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

.product-title {
  font-size: 24px;
  font-weight: 800;
  margin-bottom: 5px;
  text-transform: uppercase;
}

.product-subtitle-right {
  font-size: 14px;
  color: #666;
  margin-bottom: 10px;
}

.product-description-right {
  font-size: 14px;
  color: #444;
  margin-bottom: 20px;
}

/* Bundle Options */
.bundle-options {
  display: flex;
  justify-content: flex-start;
  gap: 10px;
  margin-bottom: 20px;
}

.bundle {
  position: relative;
}

.bundle-btn {
  border: 2px solid #ddd;
  padding: 10px;
  border-radius: 8px;
  background: #f9f9f9;
  width: 100px;
  height: 45px;
  font-size: 16px;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.bundle-btn.selected {
  border-color: #341f97;
  font-weight: bold;
  background: #f3f2fd;
}

.deal-tag {
  position: absolute;
  top: -12px;
  left: 50%;
  transform: translateX(-50%);
  background: #d32f2f;
  color: white;
  font-size: 12px;
  padding: 4px 8px;
  border-radius: 4px;
  white-space: nowrap;
}

/* Subscription Box */
.subscription-box {
  margin-bottom: 20px;
  position: relative;
}

.hidden-radio {
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
  pointer-events: none;
}

.subscription-wrapper {
  position: relative;
  padding-top: 12px; /* Make room for tag */
}

.save-tag {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  background: #d32f2f;
  color: white;
  font-size: 12px;
  padding: 4px 8px;
  border-radius: 4px;
  white-space: nowrap;
  z-index: 1;
}

.subscription-option {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: white;
  padding: 15px;
  border-radius: 8px;
  cursor: pointer;
  border: 2px solid #ddd;
  transition: all 0.2s ease;
}

.subscription-option:has(input:checked) {
  border-color: #341f97;
  background: #f8f7ff;
}

/* Remove old discount label styles */
.discount-label {
  display: none;
}

/* One-time Purchase */
.one-time-option {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 15px;
  border-radius: 8px;
  background: #f9f9f9;
  margin-bottom: 20px;
  cursor: pointer;
  border: 2px solid transparent;
  transition: all 0.2s ease;
}

.one-time-option:hover {
  background: #f8f7ff;
}

.one-time-option:has(input:checked) {
  border-color: #341f97;
  background: #f8f7ff;
  box-shadow: 0 2px 4px rgba(52, 31, 151, 0.1);
}

/* Variant Selection */
.variant-selection {
  margin-bottom: 20px;
}

.variant-title {
  font-size: 16px;
  margin-bottom: 10px;
  font-weight: 600;
}

/* Variant Grid */
.variant-grid {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

/* Variant Row */
.variant-row {
  display: grid;
  grid-template-columns: 60px 1fr 120px;
  align-items: center;
  gap: 12px;
  padding: 8px;
  border: 2px solid #ddd;
  border-radius: 8px;
  background: white;
  cursor: default; /* Changed from pointer */
}

/* Remove hover and selected states */
.variant-row:hover {
  border-color: #ddd;
}

.variant-row.selected {
  border-color: #ddd;
  background: white;
}

/* Colored block instead of product image */
.variant-image img {
  width: 60px;
  height: 60px;
  border-radius: 4px;
  object-fit: cover;
}

.variant-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.variant-actions {
  display: flex;
  justify-content: flex-end;
}

.sold-out {
  color: red;
  font-weight: bold;
  margin-top: 4px;
}

/* Quantity Controls */
.quantity-controls {
  display: flex;
  align-items: center;
  gap: 8px;
}

.qty-btn {
  width: 28px;
  height: 28px;
  border: 2px solid #341f97;
  border-radius: 50%;
  background: white;
  color: #341f97;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  line-height: 1;
  transition: all 0.2s ease;
}

.qty-btn:hover:not(:disabled) {
  background: #341f97;
  color: white;
}

.qty-btn:disabled {
  border-color: #ddd;
  color: #ddd;
  cursor: not-allowed;
}

.qty-display {
  min-width: 20px;
  text-align: center;
  font-weight: 600;
  color: #333;
}

/* Selected Variants */
.selected-variants {
  margin-bottom: 20px;
  padding: 15px;
  border: 2px solid #ddd;
  border-radius: 10px;
}

.selected-variants h3 {
  font-size: 16px;
  margin-bottom: 10px;
  font-weight: 600;
}

.selected-variant-item {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 8px;
  background: #f9f9f9;
  border-radius: 6px;
  margin-bottom: 8px;
}

/* Small block for the selected variants list */
.variant-color-block-small {
  width: 40px;
  height: 40px;
  background-color: #a5ffd6;
  border-radius: 4px;
}

.empty-selection {
  color: #666;
  font-style: italic;
}

/* Add to Cart */
.add-to-cart-btn {
  width: 100%;
  padding: 15px;
  background: #341f97;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.add-to-cart-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.add-to-cart-btn:hover:not(:disabled) {
  background: #2a1878;
}

/* Debug Container (optional) */
.debug-container {
  margin-top: 20px;
  padding: 15px;
  background: #f9f9f9;
  border: 2px solid #eee;
  border-radius: 8px;
  font-size: 14px;
}
.debug-container pre {
  background: #fff;
  padding: 10px;
  border-radius: 4px;
  overflow-x: auto;
  max-height: 200px;
}


</style>
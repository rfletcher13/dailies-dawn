{%comment %}Build a box component{% endcomment %}
{% assign bab_id = all_products['clear-protein-box'].id %}

<div class="box-builder-container">
    <!-- Left Side: Images and Logos -->
    <div class="image-section">
      <h2 class="image-section-title">Build Your Protein Box</h2>
      <div class="image-gallery">
        <div class="product-images-column">
            <img src="https://savortheflavour.com/wp-content/uploads/2020/07/Blue-Lagoon-Mocktail-Tasty.jpg" alt="Protein Box" class="product-image">
            <img src="https://savortheflavour.com/wp-content/uploads/2020/07/Blue-Lagoon-Mocktail-Tasty.jpg" alt="Protein Box" class="product-image">
        </div>
      </div>
    </div>
  
    <!-- Right Side: Scrollable GUI -->
    <div class="gui-section">
      <div class="bag-selection">
        {% for bags in (1..4) reversed %}
          <div class="bag-option {% if selected_bags == bags %}selected{% endif %} {% if bags == 4 %}best-deal{% endif %}" data-bags="{{ bags }}">
            {% if bags == 4 %}<span class="deal-badge">Best Deal</span>{% endif %}
            <span class="bag-count">{{ bags }} Bag{% if bags != 1 %}s{% endif %}</span>
          </div>
        {% endfor %}
      </div>
  
      <div class="variant-selection-container">
        <div class="purchase-options">
            <div class="purchase-type-button subscribe-button" data-purchase-type="subscribe">
                <div class="purchase-type-label">Subscribe & Save</div>
                <div class="price-container">
                    <div class="original-price" id="subscribeOriginalPrice">$0.00</div>
                    <div class="purchase-type-price" id="subscribeTotalPrice">$0.00</div>
                </div>
                <div class="discount-badge" id="subscribeDiscountBadge"></div>
            </div>
            <div class="purchase-type-button" data-purchase-type="onetime">
                <div class="purchase-type-label">One Time Purchase</div>
                <div class="price-container">
                    <div class="original-price" id="originalPrice">$0.00</div>
                    <div class="purchase-type-price" id="totalPrice">$0.00</div>
                </div>
                <div class="discount-badge" id="discountBadge"></div>
            </div>
        </div>
        <h3 class="variant-section-title">Select Your Flavors</h3>
        <div class="variants-grid" id="variantsGrid"></div>
      </div>
  
      <div class="cart-button-container">
        <button class="add-to-cart-button" id="addToCartButton">Add to Cart</button>
      </div>
    </div>
  </div>

<script>
    // Constants and State
    const BAB_ID = {{ bab_id }};
    const DEFAULT_SELECTED_BAGS = 3; // Changed to always be 3
    let skioData = null;
    let variantPrices = {};
    let currentDiscount = 0;
    let isSubscription = false;

    // Utility Functions
    class SkioBox { 
        static parse(apiResponse) {
            apiResponse = apiResponse.DynamicBox
            return {
                boxId: apiResponse.boxId,
                currencyCode: apiResponse.currencyCode || 'USD',
                fixedDiscountTier: apiResponse.fixedDiscountTier || null,
                percentDiscountTier: apiResponse.percentDiscountTier || {
                    1: "0",
                    2: "0",
                    3: "0",
                    4: "0"
                },
                sizeRange: apiResponse.sizeRange || null,
                sizeInterval: apiResponse.sizeInterval || [1, 2, 3, 4],
                priceRange: apiResponse.priceRange || null,
                selectableProductVariants: apiResponse.selectableProductVariants.map(product => ({
                    productTitle: product.productTitle,
                    productImageSrc: product.productImageSrc,
                    productPlatformId: product.productPlatformId,
                    productHandle: product.productHandle,
                    productVariants: product.productVariants.map(variant => ({
                        platformId: variant.platformId,
                        productVariantTitle: variant.productVariantTitle,
                        imageSrc: variant.imageSrc,
                        price: variant.price,
                        compareAtPrice: variant.compareAtPrice || 0,
                        inventory: variant.inventory
                    }))
                })),
                sellingPlanGroup: apiResponse.sellingPlanGroup,
                settings: apiResponse.settings,
                theme: apiResponse.theme,
                oneTimeUpsells: apiResponse.oneTimeUpsells || [],
                oneTimeUpsellsSellingPlanMapping: apiResponse.oneTimeUpsellsSellingPlanMapping || {}
            };
        }
    }

    function parseVariants(skioData) {
        if (!skioData?.selectableProductVariants || !skioData?.sellingPlanGroup) return [];
        
        const sellingPlanId = Object.keys(skioData.sellingPlanGroup)[0];
        const sellingPlan = skioData.sellingPlanGroup[sellingPlanId];
        const variantMapping = sellingPlan.variantMapping || {};

        return skioData.selectableProductVariants.flatMap(product => 
            product.productVariants.map(variant => ({
                platformId: variant.platformId,
                productVariantTitle: variant.productVariantTitle,
                imageSrc: variant.imageSrc,
                price: variant.price,
                compareAtPrice: variant.compareAtPrice,
                inventory: variant.inventory,
                productTitle: product.productTitle,
                productHandle: product.productHandle,
                productPlatformId: product.productPlatformId,
                adjustedPrice: variantMapping[variant.platformId]?.adjustedPrice || null,
                sellingPlanId: variantMapping[variant.platformId]?.planId || null
            }))
        );
    }

    function getDiscountForBags(bagCount) {
        if (!skioData) return 0;
        
        const percentTiers = skioData.percentDiscountTier || {};
        const fixedTiers = skioData.fixedDiscountTier || {};
        
        // Check for percentage discount
        const percentDiscount = parseFloat(percentTiers[bagCount] || 0);
        if (percentDiscount > 0) {
            return { type: 'percent', value: percentDiscount };
        }
        
        // Check for fixed discount
        const fixedDiscount = parseFloat(fixedTiers[bagCount] || 0);
        if (fixedDiscount > 0) {
            return { type: 'fixed', value: fixedDiscount };
        }
        
        return { type: 'none', value: 0 };
    }

    function updateTotalPrice() {
        const selectedBags = document.querySelector('.bag-option.selected');
        const bagCount = selectedBags ? parseInt(selectedBags.dataset.bags) : 0;
        const singleBagPrice = Object.values(variantPrices)[0] || 0;
        
        // Calculate base total and discounts
        const potentialTotal = singleBagPrice * bagCount;
        const bagDiscount = getDiscountForBags(bagCount);
        
        // Calculate one-time purchase price
        let onetimeTotal = potentialTotal;
        if (bagDiscount.type === 'percent') {
            onetimeTotal = potentialTotal * (1 - (bagDiscount.value / 100));
        } else if (bagDiscount.type === 'fixed') {
            onetimeTotal = Math.max(0, potentialTotal - bagDiscount.value);
        }
        
        // Calculate subscription price (additional 10% off)
        const planId = Object.keys(skioData.sellingPlanGroup)[0]; // Get the first (and assumed only) selling plan
        const plan = skioData.sellingPlanGroup[planId];
        
        console.log(plan.priceAdjustmentAmount)
        
        const subscriptionTotal = onetimeTotal  * (1 - plan.priceAdjustmentAmount/100);

        const formatPrice = (price) => new Intl.NumberFormat('en-US', { 
            style: 'currency', 
            currency: 'USD' 
        }).format(price);

        // Update one-time purchase prices
        document.getElementById('originalPrice').textContent = formatPrice(potentialTotal);
        document.getElementById('totalPrice').textContent = formatPrice(onetimeTotal);

        // Update subscription prices
        document.getElementById('subscribeOriginalPrice').textContent = formatPrice(potentialTotal);
        document.getElementById('subscribeTotalPrice').textContent = formatPrice(subscriptionTotal);

        // Update badges and strikethroughs
        updatePriceDisplay('original', 'total', onetimeTotal < potentialTotal);
        updatePriceDisplay('subscribeOriginal', 'subscribe', true);

        // Update discount badges
        updateDiscountBadge('discountBadge', potentialTotal, onetimeTotal);
        updateDiscountBadge('subscribeDiscountBadge', potentialTotal, subscriptionTotal);

        validateQuantities();
    }

    function updatePriceDisplay(originalId, totalId, shouldStrike) {
        const originalElement = document.getElementById(`${originalId}Price`);
        if (shouldStrike) {
            originalElement.classList.add('strikethrough');
        } else {
            originalElement.classList.remove('strikethrough');
        }
    }

    function updateDiscountBadge(badgeId, originalPrice, finalPrice) {
        const badge = document.getElementById(badgeId);
        if (finalPrice < originalPrice) {
            const savings = ((originalPrice - finalPrice) / originalPrice) * 100;
            badge.textContent = `Save ${Math.round(savings)}%`;
            badge.style.display = 'block';
        } else {
            badge.style.display = 'none';
        }
    }

    function validateQuantities() {
        const selectedBags = document.querySelector('.bag-option.selected');
        const requiredBags = selectedBags ? parseInt(selectedBags.dataset.bags) : 0;
        const currentBags = Array.from(document.querySelectorAll('.variant-quantity'))
            .reduce((sum, input) => sum + (parseInt(input.value) || 0), 0);

        const addToCartButton = document.getElementById('addToCartButton');
        const errorMessage = document.querySelector('.quantity-error') || createErrorMessage();

        if (currentBags < requiredBags) {
            addToCartButton.disabled = true;
            errorMessage.textContent = `Please add ${requiredBags - currentBags} more bag(s) to meet the minimum`;
            errorMessage.classList.remove('info');
            errorMessage.classList.add('error');
            errorMessage.style.display = 'block';
        } else if (currentBags > requiredBags) {
            addToCartButton.disabled = false;
            errorMessage.textContent = `You've added ${currentBags - requiredBags} extra bag(s)`;
            errorMessage.classList.remove('error');
            errorMessage.classList.add('info');
            errorMessage.style.display = 'block';
        } else {
            addToCartButton.disabled = false;
            errorMessage.style.display = 'none';
        }
    }

    function createErrorMessage() {
        const message = document.createElement('div');
        message.className = 'quantity-error';
        document.querySelector('.cart-button-container').insertBefore(
            message, 
            document.getElementById('addToCartButton')
        );
        return message;
    }

    // UI Update Functions
    function populateVariantSelector(variants) {
        const grid = document.getElementById('variantsGrid');
        grid.innerHTML = '';
        
        // Store variant prices
        variants.forEach(variant => {
            variantPrices[variant.platformId] = variant.price;
        });

        variants.forEach(variant => {
            const variantCard = document.createElement('div');
            variantCard.className = 'variant-card';
            variantCard.innerHTML = `
                <div class="variant-image">
                    <img src="${variant.imageSrc}" alt="${variant.productVariantTitle}">
                </div>
                <div class="variant-title">
                    <h4>${variant.productVariantTitle}</h4>
                </div>
                <div class="quantity-controls">
                    <button class="quantity-btn" data-action="decrease" data-variant="${variant.platformId}">-</button>
                    <input type="number" 
                           class="variant-quantity" 
                           value="0" 
                           min="0" 
                           max="99"
                           data-variant="${variant.platformId}">
                    <button class="quantity-btn" data-action="increase" data-variant="${variant.platformId}">+</button>
                </div>
            `;
            grid.appendChild(variantCard);
        });

        initializeVariantQuantityControls();
    }

    function initializeVariantQuantityControls() {
        document.querySelectorAll('.variant-card .quantity-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const variantId = this.dataset.variant;
                const input = document.querySelector(`.variant-quantity[data-variant="${variantId}"]`);
                const currentValue = parseInt(input.value);
                
                input.value = this.dataset.action === 'increase' 
                    ? Math.min(currentValue + 1, 99)
                    : Math.max(currentValue - 1, 0);

                updateTotalPrice();
                validateQuantities();
            });
        });
    }

    function initializeBagSelection() {
        document.querySelectorAll('.bag-option').forEach(option => {
            if (parseInt(option.dataset.bags) === DEFAULT_SELECTED_BAGS) {
                option.classList.add('selected');
            }
            option.addEventListener('click', handleBagSelection);
        });
    }

    function handleBagSelection() {
        document.querySelectorAll('.bag-option').forEach(opt => opt.classList.remove('selected'));
        this.classList.add('selected');
        updateTotalPrice();  // Add this line to update price when bags change
        validateQuantities();
    }

    function initializeQuantityControls() {
        document.querySelectorAll('.quantity-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const input = document.getElementById('quantityInput');
                const currentValue = parseInt(input.value);
                input.value = this.dataset.action === 'increase' 
                    ? Math.min(currentValue + 1, 99)
                    : Math.max(currentValue - 1, 1);
            });
        });
    }

    function handleAddToCart() {
        const selectedBagOption = document.querySelector('.bag-option.selected');
        if (!selectedBagOption) return alert('Please select number of bags first');

        console.log("SkioData", skioData)

        console.log("is subscriont", isSubscription)

        console.log("Selling plan", skioData.sellingPlanGroup)

        const fullSellingPlanId = Object.keys(skioData.sellingPlanGroup)[0];
        const sellingPlanId = fullSellingPlanId.split("/").pop();

        const variants = Array.from(document.querySelectorAll('.variant-quantity'))
            .filter(input => parseInt(input.value) > 0)
            .map(input => ({
                id: input.dataset.variant.split('/').pop(),
                quantity: parseInt(input.value),
                selling_plan: isSubscription ? sellingPlanId: undefined,
                properties: {
                    _dynamicBoxIndex: "0",
                    _dynamicBoxId: skioData.boxId,
                },
            }));

        if (variants.length === 0) return alert('Please select at least one flavor');

        const formData = { items: variants };

        console.log(variants)

        fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
        })
        .then(response => response.json())
        .then(response => {
            const cartDrawer = document.querySelector('cart-drawer');
            if (cartDrawer) cartDrawer.refresh(true);
        })
        .catch(error => console.error('Error:', error));
    }

    function handlePurchaseTypeSelection() {
        const buttons = document.querySelectorAll('.purchase-type-button');
        buttons.forEach(btn => {
            btn.addEventListener('click', function() {
                buttons.forEach(b => b.classList.remove('selected'));
                this.classList.add('selected');
                isSubscription = this.dataset.purchaseType === 'subscribe';
                updateTotalPrice();
            });
        });
    }

    // Initialization
    document.addEventListener('DOMContentLoaded', function() {
        initializeBagSelection();
        initializeQuantityControls();
        document.getElementById('addToCartButton').addEventListener('click', handleAddToCart);
        handlePurchaseTypeSelection();
        
        // Set subscribe as default
        const subscribeButton = document.querySelector('[data-purchase-type="subscribe"]');
        if (subscribeButton) {
            subscribeButton.classList.add('selected');
            isSubscription = true;
        }

        // Fetch Skio Data
        fetch('https://api.skio.com/storefront-http/get-dynamic-box', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productPlatformId: BAB_ID })
        })
        .then(response => response.json())
        .then(data => {
            skioData = SkioBox.parse(data);
            const variants = parseVariants(skioData);
            populateVariantSelector(variants);
            
            // After variants are loaded, update the price for default 3 bags
            const defaultBagOption = document.querySelector(`.bag-option[data-bags="${DEFAULT_SELECTED_BAGS}"]`);
            if (defaultBagOption) {
                defaultBagOption.classList.add('selected');
                updateTotalPrice(); // Update price immediately after variants are loaded
            }
        })
        .catch(error => console.error('Error fetching SkioBox data:', error));
    });

    function handleResize() {
        const windowHeight = window.innerHeight;
        const isMobile = window.innerWidth <= 768;
        const imageSection = document.querySelector('.image-section');
        const productImages = document.querySelectorAll('.product-image');

        if (isMobile) {
            imageSection.style.height = 'auto';
            productImages.forEach(img => {
                img.style.maxHeight = `calc((60vh - 100px) / 2)`;
            });
        } else {
            imageSection.style.height = `calc(${windowHeight}px - 40px)`;
            productImages.forEach(img => {
                img.style.maxHeight = `calc((${windowHeight}px - 150px) / 2)`;
            });
        }
    }

    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Initialize and add event listeners
    window.addEventListener('load', handleResize);
    window.addEventListener('resize', debounce(handleResize, 250));
</script>

<style>
    .box-builder-container {
        display: flex;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        gap: 20px;
        min-height: 100vh;
        position: relative;
    }
    
    /* Left Side: Images */
    .image-section {
        width: 45%;
        max-width: 500px;
        position: sticky;
        top: 20px;
        align-self: flex-start;
        height: calc(100vh - 40px);
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }
    
    .image-section-title {
      font-size: 1.5em;
      color: #333;
      margin-bottom: 15px;
      text-align: center;
    }
    
    .image-gallery {
        flex: 1;
        display: flex;
        flex-direction: column;
        position: relative;
        overflow: hidden;
    }

    .product-images-column {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 15px;
        overflow-y: auto;
        padding-right: 10px;
        -webkit-overflow-scrolling: touch;
    }

    .product-image {
        width: 100%;
        height: auto;
        max-height: calc((100vh - 150px) / 2);
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Right Side: GUI */
    .gui-section {
        flex: 1;
        min-width: 320px;
        max-width: 600px;
        padding: 10px;
    }
    
    /* Bag Selection */
    .bag-selection {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .bag-option {
      position: relative;
      border: 2px solid #e0e0e0;
      border-radius: 6px;
      padding: 15px 8px 12px;
      text-align: center;
      cursor: pointer;
      background: #fff;
      transition: border 0.3s ease;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      min-height: 45px;
    }
    
    .bag-option.selected { border: 3px solid #4a90e2; }
    .bag-option:hover { border-color: #a0a0a0; }
    
    .deal-badge {
      position: absolute;
      top: -15px;
      left: 50%;
      transform: translateX(-50%);
      background: #d32f2f;
      color: white;
      padding: 1px 4px;
      border-radius: 2px;
      font: 600 7px uppercase;
      letter-spacing: 0.3px;
      white-space: nowrap;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .bag-count {
      font-size: 13px;
      font-weight: 600;
      color: #333;
    }
    
    /* Variant Selection */
    .variant-selection-container {
      margin-bottom: 20px;
    }
    
    .purchase-options {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 20px;
    }

    .purchase-type-button {
        cursor: pointer;
        opacity: 0.7;
        transition: all 0.3s ease;
    }

    .purchase-type-button.selected {
        opacity: 1;
        border-color: #4a90e2;
        background: #f8f8f8;
    }

    .subscribe-button {
        background: #e3f2fd;
        border-color: #4a90e2;
    }

    .subscribe-button.selected {
        background: #bbdefb;
    }

    .purchase-type-button {
      background: #f8f8f8;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      padding: 15px 20px;
      margin-bottom: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
      transition: border-color 0.3s ease;
      position: relative;
    }
    
    .purchase-type-button:hover { border-color: #4a90e2; }
    
    .purchase-type-label {
      font-weight: bold;
      font-size: 16px;
      color: #333;
    }
    
    .price-container {
      display: flex;
      align-items: center;
      gap: 10px;
      position: relative;
    }
    
    .original-price {
      color: #666;
      font-size: 14px;
      opacity: 0.8;
    }
    
    .original-price.strikethrough {
      text-decoration: line-through;
      color: #999;
    }
    
    .purchase-type-price {
      font-size: 16px;
      color: #4a90e2;
      font-weight: bold;
    }
    
    .discount-badge {
        position: absolute;
        top: -12px;
        right: -12px;
        background: #4CAF50;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: none;
    }
    
    .variant-section-title {
      text-align: center;
      margin-bottom: 20px;
      color: #333;
      font-size: 1.2em;
    }
    
    .variants-grid {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    .variant-card {
      display: grid;
      grid-template-columns: 80px 1fr auto;
      align-items: center;
      gap: 15px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      padding: 10px;
      background: white;
      transition: border-color 0.3s ease;
    }
    
    .variant-card:hover { border-color: #4a90e2; }
    
    .variant-image {
      width: 80px;
      height: 80px;
    }
    
    .variant-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 4px;
    }
    
    .variant-title h4 {
      margin: 0;
      font-size: 14px;
      color: #333;
    }
    
    .quantity-controls {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .quantity-btn {
      width: 28px;
      height: 28px;
      font-size: 16px;
      background: #f0f0f0;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    .variant-quantity {
      width: 40px;
      text-align: center;
      padding: 4px;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      font-size: 14px;
    }
    
    /* Cart Button */
    .cart-button-container {
      margin-bottom: 20px;
    }
    
    .add-to-cart-button {
      background: #4a90e2;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 15px 30px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      width: 100%;
      transition: background-color 0.3s ease;
    }
    
    .add-to-cart-button:hover { background: #357abd; }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      .box-builder-container {
        flex-direction: column;
      }

      .image-section {
        position: relative;
        top: 0;
        width: 100%;
        height: auto;
        max-width: 100%;
      }

      .image-gallery {
        height: auto;
        max-height: 60vh;
      }

      .product-image {
        max-height: calc((60vh - 100px) / 2);
      }

      .gui-section {
        max-width: 100%;
      }
    }

    @media (max-width: 1024px) {
        .box-builder-container {
            padding: 15px;
            gap: 15px;
        }

        .image-section {
            flex: 0 0 40%;
        }
    }

    /* Scrollbar Styling */
    .product-images-column::-webkit-scrollbar {
        width: 6px;
    }

    .product-images-column::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .product-images-column::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

    .quantity-error {
        text-align: center;
        margin-bottom: 10px;
        font-size: 14px;
        display: none;
        padding: 8px;
        border-radius: 4px;
    }

    .quantity-error.error {
        color: #d32f2f;
        background: rgba(211, 47, 47, 0.1);
    }

    .quantity-error.info {
        color: #4a90e2;
        background: rgba(74, 144, 226, 0.1);
    }

    .add-to-cart-button:disabled {
        background: #cccccc;
        cursor: not-allowed;
    }
</style>